{"version":3,"file":"main.b95a6112c03df6aab914.bundle.js","sources":["webpack:///./src/lib/Pagination/Pagination.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./Pagination.scss\";\nimport PropTypes from \"prop-types\";\nimport Icon from \"../Icon/Icon\";\n\nclass Pagination extends Component {\n  generatePageListItems = () => {\n    const totalPages = this.props.pages; //totalPages.length()\n    const activePage = this.props.activePage + 1;\n\n    let pages = [];\n\n    if (totalPages === 2) {\n      for (let i = 0; i < 2; i++) {\n        pages.push(\n          <Page\n            name={this.props.name}\n            key={`list-item-${i + 1}`}\n            activePage={activePage}\n            page={i + 1}\n            handleClick={this.props.handleClick}\n          />\n        );\n      }\n    }\n\n    if (totalPages === 3) {\n      for (let i = 0; i < 3; i++) {\n        pages.push(\n          <Page\n            name={this.props.name}\n            key={`list-item-${i + 1}`}\n            activePage={activePage}\n            page={i + 1}\n            handleClick={this.props.handleClick}\n          />\n        );\n      }\n    }\n\n    if (totalPages > 3 && activePage === 1) {\n      for (let i = 0; i < 3; i++) {\n        pages.push(\n          <Page\n            name={this.props.name}\n            key={`list-item-${i + 1}`}\n            activePage={activePage}\n            page={i + 1}\n            handleClick={this.props.handleClick}\n          />\n        );\n      }\n    } else if (totalPages > 3 && activePage === totalPages) {\n      for (let i = totalPages - 3; i < totalPages; i++) {\n        pages.push(\n          <Page\n            name={this.props.name}\n            key={`list-item-${i + 1}`}\n            activePage={activePage}\n            page={i + 1}\n            handleClick={this.props.handleClick}\n          />\n        );\n      }\n    } else if (totalPages > 3 && activePage === totalPages - 1) {\n      for (let i = totalPages - 3; i < totalPages; i++) {\n        pages.push(\n          <Page\n            name={this.props.name}\n            key={`list-item-${i + 1}`}\n            activePage={activePage}\n            page={i + 1}\n            handleClick={this.props.handleClick}\n          />\n        );\n      }\n    } else if (totalPages > 3 && activePage <= totalPages) {\n      for (let i = activePage - 2; i < activePage + 1; i++) {\n        pages.push(\n          <Page\n            name={this.props.name}\n            key={`list-item-${i + 1}`}\n            activePage={activePage}\n            page={i + 1}\n            handleClick={this.props.handleClick}\n          />\n        );\n      }\n    }\n\n    return pages;\n  };\n\n  render() {\n    return (\n      <nav className=\"ter-pagination\" role=\"navigation\">\n        <ul className=\"ter-pagination__list\">\n          {this.props.activePage + 1 > 1 && this.props.activePage > 0 && (\n            <li\n              onClick={() =>\n                this.props.handleClick(\n                  this.props.activePage - 1,\n                  this.props.name\n                )\n              }\n              className=\"ter-pagination__list-item ter-pagination__list-item--previous\"\n            >\n              <Icon type=\"open-caret-left-dark-8px\" size=\"8px\" />\n            </li>\n          )}\n          {this.generatePageListItems()}\n          {this.props.activePage + 1 < this.props.pages && (\n            <li\n              onClick={() => this.props.handleClick(this.props.activePage + 1)}\n              className=\"ter-pagination__list-item ter-pagination__list-item--next\"\n            >\n              <Icon type=\"open-caret-right-dark-8px\" size=\"8px\" />\n            </li>\n          )}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Pagination;\n\nPagination.propTypes = {\n  pages: PropTypes.number.isRequired,\n  activePage: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  name: PropTypes.string\n};\n\nexport class Page extends Component {\n  handleClick = () => {\n    if (this.props.activePage === this.props.page) {\n      return;\n    } else {\n      this.props.handleClick(this.props.page - 1, this.props.name);\n    }\n  };\n\n  render() {\n    const { activePage, page } = this.props;\n    return (\n      <li\n        onClick={this.handleClick}\n        className={`ter-pagination__list-item ${\n          activePage === page ? \"is-active\" : \"\"\n        }`}\n      >\n        {page}\n      </li>\n    );\n  }\n}\n"],"mappings":"AAKA","sourceRoot":""}